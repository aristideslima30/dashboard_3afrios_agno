#!/usr/bin/env python3
"""
Teste do Bruno - Agente Qualifica√ß√£o
Valida nova intelig√™ncia com personalidade e capacidades de descoberta
"""

import sys
import os
import importlib.util
import json

# Adiciona o diret√≥rio raiz e server ao path
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)
sys.path.insert(0, os.path.join(current_dir, 'server'))

# Carrega o m√≥dulo qualificacao diretamente
qualificacao_path = os.path.join(current_dir, 'server', 'agents', 'qualificacao.py')
spec = importlib.util.spec_from_file_location("qualificacao", qualificacao_path)
qualificacao_module = importlib.util.module_from_spec(spec)

# Mock da fun√ß√£o generate_response para evitar depend√™ncia da OpenAI
def mock_generate_response(prompt, message):
    """Mock da fun√ß√£o OpenAI para testes"""
    message_lower = message.lower()
    
    if any(word in message_lower for word in ['quanto', 'pre√ßo', 'valor']):
        return "Bruno da 3A Frios! Para dar um or√ßamento preciso, preciso saber: quantas pessoas, que tipo de evento e qual seu prazo?"
    elif 'empresa' in message_lower or 'restaurante' in message_lower:
        return "Bruno aqui! Vejo que √© para uso empresarial. Me conta: qual o volume mensal que voc√™s trabalham e se √© demanda regular?"
    elif 'festa' in message_lower or 'anivers√°rio' in message_lower:
        return "Bruno da 3A Frios! Que legal, uma festa! Para quantas pessoas ser√°? J√° tem data definida?"
    else:
        return "Bruno da 3A Frios aqui! Para te qualificar melhor, me conta mais sobre o que voc√™ est√° planejando!"

# Injeta o mock no m√≥dulo antes de carregar
sys.modules['openai_client'] = type('MockModule', (), {'generate_response': mock_generate_response})()

# Carrega o m√≥dulo
spec.loader.exec_module(qualificacao_module)

# Importa as fun√ß√µes necess√°rias
respond = qualificacao_module.respond
_detect_client_segment = qualificacao_module._detect_client_segment
_detect_need_type = qualificacao_module._detect_need_type
_extract_context_clues = qualificacao_module._extract_context_clues

def test_bruno_intelligence():
    """Teste abrangente do Bruno com personalidade e funcionalidades"""
    
    # Cat√°logo de teste
    catalog_items = [
        {'produto': 'Picanha', 'descricao': 'Picanha Premium', 'preco': '89,90'},
        {'produto': 'Lingui√ßa', 'descricao': 'Lingui√ßa Toscana', 'preco': '25,90'},
        {'produto': 'Fraldinha', 'descricao': 'Fraldinha Bovina', 'preco': '39,90'},
        {'produto': 'Alcatra', 'descricao': 'Alcatra Premium', 'preco': '52,90'},
    ]
    
    context = {
        'catalog_items': catalog_items,
        'conversation_history': []
    }
    
    print("üß™ INICIANDO TESTES DO BRUNO - AGENTE QUALIFICA√á√ÉO")
    print("=" * 60)
    
    tests = [
        {
            'name': 'Sauda√ß√£o Inicial',
            'message': 'Oi!',
            'expected_keywords': ['Bruno', '3A Frios', 'qualifica√ß√£o', 'necessidades', 'planejando'],
            'description': 'Apresenta√ß√£o consultiva e descoberta'
        },
        {
            'name': 'Evento Familiar',
            'message': 'Estou organizando um churrasco para a fam√≠lia, somos 15 pessoas',
            'expected_keywords': ['Bruno', 'pessoas', 'perguntas', 'qualificar', 'ocasi√£o'],
            'description': 'Qualifica√ß√£o de evento familiar com contexto'
        },
        {
            'name': 'Demanda Empresarial',
            'message': 'Preciso de carnes para nosso restaurante',
            'expected_keywords': ['Bruno', 'volume', 'regular', 'empresarial', 'investimento'],
            'description': 'Identifica√ß√£o e qualifica√ß√£o de cliente PJ'
        },
        {
            'name': 'Evento Especial',
            'message': 'Vou fazer uma festa de casamento',
            'expected_keywords': ['Bruno', 'convidados', 'data', 'especial', 'servi√ßo'],
            'description': 'Qualifica√ß√£o de evento especial'
        },
        {
            'name': 'Urg√™ncia',
            'message': 'Preciso urgente para amanh√£',
            'expected_keywords': ['Bruno', 'urgente', 'priorizar', 'quando', 'prazo'],
            'description': 'Detec√ß√£o e tratamento de urg√™ncia'
        },
        {
            'name': 'Pergunta sobre Pre√ßo',
            'message': 'Quanto custa a picanha?',
            'expected_keywords': ['Bruno', 'or√ßamento', 'pessoas', 'evento', 'prazo'],
            'description': 'Qualifica√ß√£o antes de dar pre√ßos'
        },
        {
            'name': 'Primeira Vez',
            'message': '√â a primeira vez que vou comprar, n√£o sei o que escolher',
            'expected_keywords': ['Bruno', 'descoberta', 'perguntas', 'ocasi√£o', 'pessoas'],
            'description': 'Orienta√ß√£o para cliente descoberta'
        },
        {
            'name': 'Compara√ß√£o',
            'message': 'Estou comparando pre√ßos com outros fornecedores',
            'expected_keywords': ['Bruno', 'outros lugares', 'compara√ß√£o', 'qualificar', 'necessidades'],
            'description': 'Tratamento de cliente comparativo'
        }
    ]
    
    success_count = 0
    
    for i, test in enumerate(tests, 1):
        print(f"\nüß™ TESTE {i}: {test['name']}")
        print(f"üìù Entrada: '{test['message']}'")
        print(f"üéØ Objetivo: {test['description']}")
        
        try:
            # Executa o teste
            response = respond(test['message'], context)
            resposta = response.get('resposta', '')
            acao_especial = response.get('acao_especial')
            
            print(f"ü§ñ Bruno: {resposta[:150]}...")
            if acao_especial:
                print(f"‚ö° A√ß√£o Especial: {acao_especial}")
            
            # Valida palavras-chave
            keywords_found = []
            keywords_missing = []
            
            resposta_lower = resposta.lower()
            for keyword in test['expected_keywords']:
                if keyword.lower() in resposta_lower:
                    keywords_found.append(keyword)
                else:
                    keywords_missing.append(keyword)
            
            # Verifica crit√©rios de sucesso
            success = len(keywords_missing) == 0 and len(resposta) > 50
            
            if success:
                print("‚úÖ SUCESSO!")
                success_count += 1
            else:
                print("‚ùå FALHA!")
                if keywords_missing:
                    print(f"   Palavras-chave faltando: {keywords_missing}")
                if len(resposta) <= 50:
                    print(f"   Resposta muito curta: {len(resposta)} chars")
            
        except Exception as e:
            print(f"‚ùå ERRO NO TESTE: {str(e)}")
            success_count -= 1  # Penaliza erro
    
    # Relat√≥rio final
    print("\n" + "=" * 60)
    print("üìä RELAT√ìRIO FINAL DOS TESTES DO BRUNO")
    print("=" * 60)
    
    print(f"‚úÖ Testes bem-sucedidos: {success_count}/{len(tests)}")
    print(f"üìà Taxa de sucesso: {(success_count/len(tests)*100):.1f}%")
    
    if success_count == len(tests):
        print("\nüéâ PERFEITO! Bruno passou em todos os testes!")
        print("üöÄ Agente est√° pronto para produ√ß√£o!")
    else:
        print(f"\n‚ö†Ô∏è {len(tests)-success_count} testes falharam")
    
    # Testa funcionalidades espec√≠ficas
    print("\nüîß TESTES DE FUNCIONALIDADES ESPEC√çFICAS")
    print("-" * 40)
    
    # Teste de detec√ß√£o de segmento
    test_messages = [
        "Organizando churrasco para a fam√≠lia",
        "Preciso para nosso restaurante",
        "Festa de casamento"
    ]
    
    for msg in test_messages:
        segment = _detect_client_segment(msg)
        print(f"üìã '{msg}' ‚Üí Segmento: {segment}")
    
    # Teste de extra√ß√£o de contexto
    test_context = "Somos 20 pessoas, preciso para amanh√£"
    clues = _extract_context_clues(test_context)
    print(f"üîç Contexto extra√≠do: {clues}")
    
    print("\nüèÜ BRUNO TESTADO COM SUCESSO!")
    
    return success_count == len(tests)

if __name__ == '__main__':
    success = test_bruno_intelligence()
    exit(0 if success else 1)