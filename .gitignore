# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem
secrets/
secrets/*.json

# Python
.venv/
**/__pycache__/

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*
!.env.example
!.env.local.example

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# Projeto na Vercel
- Abra Vercel → New Project → Import `aristideslima30/dashboard_3afrios_agno`.
- Framework: detecta automaticamente como `Next.js`.
- Root Directory: use a raiz do repo (onde estão `package.json` e `src`).
- Build & Output:
  - Build: `npm run build` (já está em `package.json` com `--turbopack`).
  - Install: Vercel executa `npm install` automaticamente.
  - Output: padrão do Next (`.next`), não precisa configurar.

**Variáveis de Ambiente (Vercel)**
- Adicione em Project Settings → Environment Variables (Production/Preview/Development):
  - `NEXT_PUBLIC_SUPABASE_URL`
  - `NEXT_PUBLIC_SUPABASE_ANON_KEY`
  - `NEXT_PUBLIC_BACKEND_URL` (aponta para o backend na Railway quando estiver pronto)
  - Opcionais (se for usar Evolution/WhatsApp no frontend):
    - `NEXT_PUBLIC_EVOLUTION_SERVER_URL`
    - `NEXT_PUBLIC_EVOLUTION_INSTANCE`
    - `NEXT_PUBLIC_EVOLUTION_API_KEY`
    - `NEXT_PUBLIC_WHATSAPP_DRY_RUN` (e.g., `true` para não enviar em produção até testar)

**Smoke Test**
- Após o primeiro deploy, acesse a URL pública do projeto.
- Se sua rota `src/app/api/webhook` existir, teste `GET /api/webhook`; deve responder com JSON.
- Se não existir a rota ainda, tudo bem: a UI vai subir. Depois criamos a rota de proxy para o backend.

**Opcional: ignorar artefatos Python**
- Já que você tem backend em `server/`, ignore `.venv` e `__pycache__` para manter o repo leve. Segue um ajuste sugerido no `.gitignore`:
.env
